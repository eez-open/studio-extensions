<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
   <title>:SBUS&lt;n&gt;:CAN Commands</title><link rel="stylesheet" href="docbook_xsl_dds.css" type="text/css"><meta name="generator" content="DocBook XSL Stylesheets V1.70.1"><link rel="start" href="index.htm" title="Agilent InfiniiVision 2000&nbsp;X-Series Oscilloscopes"><link rel="up" href="sbus_commands.htm" title=":SBUS<n&gt; Commands"><link rel="prev" href="_sbus_n_mode.htm" title=":SBUS<n&gt;:MODE"><link rel="next" href="_sbus_n_can_count_error.htm" title=":SBUS<n&gt;:CAN:COUNt:ERRor"><link rel="copyright" href="ln-warranty.htm" title="Warranty"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><p align="right"><a href="sbus_commands.htm" style="text-decoration: none"><font size="1" color="#0099CC"><b>:SBUS&lt;n&gt; Commands </b></font></a><br><hr noshade="true" color="#0099CC"></p><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="sbus_n_can_commands"></a>:SBUS&lt;n&gt;:CAN Commands<a name="d0e31470"></a><a name="d0e31473"></a></h2></div></div></div><div class="note"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="images/note.gif"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>These commands are valid when the automotive CAN and LIN serial
    decode option (Option AMS) has been licensed.</p></td></tr></table></div><div class="table"><a name="d0e31479"></a><p class="title"><b>:SBUS&lt;n&gt;:CAN Commands Summary:</b></p><div class="table-contents"><table summary=":SBUS<n&gt;:CAN Commands Summary" cellspacing="0" cellpadding="5" width="100%" border="1"><colgroup><col><col><col></colgroup><thead valign="bottom"><tr><th align="left">Command</th><th align="left">Query</th><th align="left">Options and Query Returns</th></tr></thead><tbody valign="top"><tr><td><strong class="userinput"><code>n/a</code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_can_count_error.htm#_sbus_n_can_count_error_query" title="Query Syntax">:SBUS&lt;n&gt;:CAN:COUNt:ERRor?</a></code></strong></td><td><strong class="userinput"><code>&lt;frame_count&gt; ::= integer in NR1
        format</code></strong></td></tr><tr><td><strong class="userinput"><code>n/a</code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_can_count_overload.htm#_sbus_n_can_count_overload_query" title="Query Syntax">:SBUS&lt;n&gt;:CAN:COUNt:OVERload?</a></code></strong></td><td><strong class="userinput"><code>&lt;frame_count&gt; ::= integer in NR1
        format</code></strong></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_can_count_reset.htm#_sbus_n_can_count_reset_command" title="Command Syntax">:SBUS&lt;n&gt;:CAN:COUNt:RESet</a></code></strong></td><td><strong class="userinput"><code>n/a</code></strong></td><td><strong class="userinput"><code>n/a</code></strong></td></tr><tr><td><strong class="userinput"><code>n/a</code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_can_count_total.htm#_sbus_n_can_count_total_query" title="Query Syntax">:SBUS&lt;n&gt;:CAN:COUNt:TOTal?</a></code></strong></td><td><strong class="userinput"><code>&lt;frame_count&gt; ::= integer in NR1
        format</code></strong></td></tr><tr><td><strong class="userinput"><code>n/a</code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_can_count_utilization.htm#_sbus_n_can_count_utilization_query" title="Query Syntax">:SBUS&lt;n&gt;:CAN:COUNt:UTILization?</a></code></strong></td><td><strong class="userinput"><code>&lt;percent&gt; ::= floating-point in NR3
        format</code></strong></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_can_samplepoint.htm#_sbus_n_can_samplepoint_command" title="Command Syntax">:SBUS&lt;n&gt;:CAN:SAMPlepoint
        &lt;value&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_can_samplepoint.htm#_sbus_n_can_samplepoint_query" title="Query Syntax">:SBUS&lt;n&gt;:CAN:SAMPlepoint?</a></code></strong></td><td><strong class="userinput"><code>&lt;value&gt; ::= {60 | 62.5 | 68 | 70 | 75 | 80 |
        87.5} in NR3 format</code></strong></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_can_signal_baudrate.htm#_sbus_n_can_signal_baudrate_command" title="Command Syntax">:SBUS&lt;n&gt;:CAN:SIGNal:BAUDrate
        &lt;baudrate&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_can_signal_baudrate.htm#_sbus_n_can_signal_baudrate_query" title="Query Syntax">:SBUS&lt;n&gt;:CAN:SIGNal:BAUDrate?</a></code></strong></td><td><strong class="userinput"><code>&lt;baudrate&gt; ::= integer from 10000 to 4000000
        in 100 b/s increments, or 5000000</code></strong></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_can_signal_definition.htm#_sbus_n_can_signal_definition_command" title="Command Syntax">:SBUS&lt;n&gt;:CAN:SIGNal:DEFinition
        &lt;value&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_can_signal_definition.htm#_sbus_n_can_signal_definition_query" title="Query Syntax">:SBUS&lt;n&gt;:CAN:SIGNal:DEFinition?</a></code></strong></td><td><strong class="userinput"><code>&lt;value&gt; ::= {CANH | CANL | RX | TX |
        DIFFerential | DIFL | DIFH}</code></strong></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_can_source.htm#_sbus_n_can_source_command" title="Command Syntax">:SBUS&lt;n&gt;:CAN:SOURce
        &lt;source&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_can_source.htm#_sbus_n_can_source_query" title="Query Syntax">:SBUS&lt;n&gt;:CAN:SOURce?</a></code></strong></td><td><p><strong class="userinput"><code>&lt;source&gt; ::= {CHANnel&lt;n&gt; |
        EXTernal} for DSO
        models</code></strong></p><p><strong class="userinput"><code>&lt;source&gt; ::=
        {CHANnel&lt;n&gt; | DIGital&lt;d&gt; |} for MSO
        models</code></strong></p><p><strong class="userinput"><code>&lt;n&gt; ::= 1 to (# analog
        channels) in NR1 format</code></strong></p><p><strong class="userinput"><code>&lt;d&gt;
        ::= 0 to (# digital channels - 1) in NR1
        format</code></strong></p></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_can_trigger.htm#_sbus_n_can_trigger_command" title="Command Syntax">:SBUS&lt;n&gt;:CAN:TRIGger
        &lt;condition&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_can_trigger.htm#_sbus_n_can_trigger_query" title="Query Syntax">:SBUS&lt;n&gt;:CAN:TRIGger?</a></code></strong></td><td><p><strong class="userinput"><code>&lt;condition&gt; ::= {SOF | DATA | ERRor |
        IDData | IDEither | IDRemote | ALLerrors | OVERload |
        ACKerror}</code></strong></p></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_can_trigger_pattern_data.htm#_sbus_n_can_trigger_pattern_data_command" title="Command Syntax">:SBUS&lt;n&gt;:CAN:TRIGger:PATTern:DATA
        &lt;string&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_can_trigger_pattern_data.htm#_sbus_n_can_trigger_pattern_data_query" title="Query Syntax">:SBUS&lt;n&gt;:CAN:TRIGger:PATTern:DATA?</a></code></strong></td><td><p><strong class="userinput"><code>&lt;string&gt; ::= "nn...n" where n ::= {0 | 1
        | X | $}</code></strong></p><p><strong class="userinput"><code>&lt;string ::= "0xnn...n"
        where n ::= {0,..,9 | A,..,F | X | $}</code></strong></p></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_can_trigger_pattern_data_length.htm#_sbus_n_can_trigger_pattern_data_length_command" title="Command Syntax">:SBUS&lt;n&gt;:CAN:TRIGger:PATTern:DATA:LENGth
        &lt;length&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_can_trigger_pattern_data_length.htm#_sbus_n_can_trigger_pattern_data_length_query" title="Query Syntax">:SBUS&lt;n&gt;:CAN:TRIGger:PATTern:DATA:LENGth?</a></code></strong></td><td><strong class="userinput"><code>&lt;length&gt; ::= integer from 1 to 8 in NR1
        format</code></strong></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_can_trigger_pattern_id.htm#_sbus_n_can_trigger_pattern_id_command" title="Command Syntax">:SBUS&lt;n&gt;:CAN:TRIGger:PATTern:ID
        &lt;string&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_can_trigger_pattern_id.htm#_sbus_n_can_trigger_pattern_id_query" title="Query Syntax">:SBUS&lt;n&gt;:CAN:TRIGger:PATTern:ID?</a></code></strong></td><td><p><strong class="userinput"><code>&lt;string&gt; ::= "nn...n" where n ::= {0 | 1
        | X | $}</code></strong></p><p><strong class="userinput"><code>&lt;string ::= "0xnn...n"
        where n ::= {0,..,9 | A,..,F | X | $}</code></strong></p></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_can_trigger_pattern_id_mode.htm#_sbus_n_can_trigger_pattern_id_mode_command" title="Command Syntax">:SBUS&lt;n&gt;:CAN:TRIGger:PATTern:ID:MODE
        &lt;value&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_can_trigger_pattern_id_mode.htm#_sbus_n_can_trigger_pattern_id_mode_query" title="Query Syntax">:SBUS&lt;n&gt;:CAN:TRIGger:PATTern:ID:MODE?</a></code></strong></td><td><strong class="userinput"><code>&lt;value&gt; ::= {STANdard |
        EXTended}</code></strong></td></tr></tbody></table></div></div><br class="table-break"></div></body></html>