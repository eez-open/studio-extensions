<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
   <title>:SBUS&lt;n&gt;:UART Commands</title><link rel="stylesheet" href="docbook_xsl_dds.css" type="text/css"><meta name="generator" content="DocBook XSL Stylesheets V1.70.1"><link rel="start" href="index.htm" title="Agilent InfiniiVision 2000&nbsp;X-Series Oscilloscopes"><link rel="up" href="sbus_commands.htm" title=":SBUS<n&gt; Commands"><link rel="prev" href="_sbus_n_spi_width.htm" title=":SBUS<n&gt;:SPI:WIDTh"><link rel="next" href="_sbus_n_uart_base.htm" title=":SBUS<n&gt;:UART:BASE"><link rel="copyright" href="ln-warranty.htm" title="Warranty"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><p align="right"><a href="sbus_commands.htm" style="text-decoration: none"><font size="1" color="#0099CC"><b>:SBUS&lt;n&gt; Commands </b></font></a><br><hr noshade="true" color="#0099CC"></p><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="sbus_n_uart_commands"></a>:SBUS&lt;n&gt;:UART Commands<a name="d0e35189"></a><a name="d0e35192"></a></h2></div></div></div><div class="note"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="25"><img alt="[Note]" src="images/note.gif"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>These commands are only valid when the UART/RS-232 triggering and
    serial decode option (Option&nbsp;232) has been licensed.</p></td></tr></table></div><div class="table"><a name="d0e35198"></a><p class="title"><b>:SBUS&lt;n&gt;:UART Commands Summary:</b></p><div class="table-contents"><table summary=":SBUS<n&gt;:UART Commands Summary" cellspacing="0" cellpadding="5" width="100%" border="1"><colgroup><col><col><col></colgroup><thead valign="bottom"><tr><th align="left">Command</th><th align="left">Query</th><th align="left">Options and Query Returns</th></tr></thead><tbody valign="top"><tr><td><strong class="userinput"><code><a href="_sbus_n_uart_base.htm#_sbus_n_uart_base_command" title="Command Syntax">:SBUS&lt;n&gt;:UART:BASE
        &lt;base&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_base.htm#_sbus_n_uart_base_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:BASE?</a></code></strong></td><td><p><strong class="userinput"><code>&lt;base&gt; ::= {ASCii | BINary |
        HEX}</code></strong></p></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_uart_baudrate.htm#_sbus_n_uart_baudrate_command" title="Command Syntax">:SBUS&lt;n&gt;:UART:BAUDrate
        &lt;baudrate&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_baudrate.htm#_sbus_n_uart_baudrate_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:BAUDrate?</a></code></strong></td><td><strong class="userinput"><code>&lt;baudrate&gt; ::= integer from 100 to
        8000000</code></strong></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_uart_bitorder.htm#_sbus_n_uart_bitorder_command" title="Command Syntax">:SBUS&lt;n&gt;:UART:BITorder
        &lt;bitorder&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_bitorder.htm#_sbus_n_uart_bitorder_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:BITorder?</a></code></strong></td><td><strong class="userinput"><code>&lt;bitorder&gt; ::= {LSBFirst |
        MSBFirst}</code></strong></td></tr><tr><td><strong class="userinput"><code>n/a</code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_count_error.htm#_sbus_n_uart_count_error_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:COUNt:ERRor?</a></code></strong></td><td><p><strong class="userinput"><code>&lt;frame_count&gt; ::= integer in NR1
        format</code></strong></p></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_uart_count_reset.htm#_sbus_n_uart_count_reset_command" title="Command Syntax">:SBUS&lt;n&gt;:UART:COUNt:RESet</a></code></strong></td><td><strong class="userinput"><code>n/a</code></strong></td><td><strong class="userinput"><code>n/a</code></strong></td></tr><tr><td><strong class="userinput"><code>n/a</code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_count_rxframes.htm#_sbus_n_uart_count_rxframes_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:COUNt:RXFRames?</a></code></strong></td><td><p><strong class="userinput"><code>&lt;frame_count&gt; ::= integer in NR1
        format</code></strong></p></td></tr><tr><td><strong class="userinput"><code>n/a</code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_count_txframes.htm#_sbus_n_uart_count_txframes_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:COUNt:TXFRames?</a></code></strong></td><td><p><strong class="userinput"><code>&lt;frame_count&gt; ::= integer in NR1
        format</code></strong></p></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_uart_framing.htm#_sbus_n_uart_framing_command" title="Command Syntax">:SBUS&lt;n&gt;:UART:FRAMing
        &lt;value&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_framing.htm#_sbus_n_uart_framing_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:FRAMing?</a></code></strong></td><td><p><strong class="userinput"><code>&lt;value&gt; ::= {OFF | &lt;decimal&gt; |
        &lt;nondecimal&gt;}</code></strong></p><p><strong class="userinput"><code>&lt;decimal&gt;
        ::= 8-bit integer from 0-255
        (0x00-0xff)</code></strong></p><p><strong class="userinput"><code>&lt;nondecimal&gt; ::=
        #Hnn where n ::= {0,..,9 | A,..,F} for
        hexadecimal</code></strong></p><p><strong class="userinput"><code>&lt;nondecimal&gt; ::=
        #Bnn...n where n ::= {0 | 1} for binary</code></strong></p></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_uart_parity.htm#_sbus_n_uart_parity_command" title="Command Syntax">:SBUS&lt;n&gt;:UART:PARity
        &lt;parity&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_parity.htm#_sbus_n_uart_parity_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:PARity?</a></code></strong></td><td><strong class="userinput"><code>&lt;parity&gt; ::= {EVEN | ODD |
        NONE}</code></strong></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_uart_polarity.htm#_sbus_n_uart_polarity_command" title="Command Syntax">:SBUS&lt;n&gt;:UART:POLarity
        &lt;polarity&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_polarity.htm#_sbus_n_uart_polarity_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:POLarity?</a></code></strong></td><td><strong class="userinput"><code>&lt;polarity&gt; ::= {HIGH |
        LOW}</code></strong></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_uart_source_rx.htm#_sbus_n_uart_source_rx_command" title="Command Syntax">:SBUS&lt;n&gt;:UART:SOURce:RX
        &lt;source&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_source_rx.htm#_sbus_n_uart_source_rx_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:SOURce:RX?</a></code></strong></td><td><p><strong class="userinput"><code>&lt;source&gt; ::= {CHANnel&lt;n&gt; |
        EXTernal} for DSO
        models</code></strong></p><p><strong class="userinput"><code>&lt;source&gt; ::=
        {CHANnel&lt;n&gt; | DIGital&lt;d&gt;} for MSO
        models</code></strong></p><p><strong class="userinput"><code>&lt;n&gt; ::= 1 to (# analog
        channels) in NR1 format</code></strong></p><p><strong class="userinput"><code>&lt;d&gt;
        ::= 0 to (# digital channels - 1) in NR1
        format</code></strong></p></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_uart_source_tx.htm#_sbus_n_uart_source_tx_command" title="Command Syntax">:SBUS&lt;n&gt;:UART:SOURce:TX
        &lt;source&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_source_tx.htm#_sbus_n_uart_source_tx_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:SOURce:TX?</a></code></strong></td><td><p><strong class="userinput"><code>&lt;source&gt; ::= {CHANnel&lt;n&gt; |
        EXTernal} for DSO
        models</code></strong></p><p><strong class="userinput"><code>&lt;source&gt; ::=
        {CHANnel&lt;n&gt; | DIGital&lt;d&gt;} for MSO
        models</code></strong></p><p><strong class="userinput"><code>&lt;n&gt; ::= 1 to (# analog
        channels) in NR1 format</code></strong></p><p><strong class="userinput"><code>&lt;d&gt;
        ::= 0 to (# digital channels - 1) in NR1
        format</code></strong></p></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_uart_trigger_base.htm#_sbus_n_uart_trigger_base_command" title="Command Syntax">:SBUS&lt;n&gt;:UART:TRIGger:BASE
        &lt;base&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_trigger_base.htm#_sbus_n_uart_trigger_base_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:TRIGger:BASE?</a></code></strong></td><td><strong class="userinput"><code>&lt;base&gt; ::= {ASCii | HEX}</code></strong></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_uart_trigger_burst.htm#_sbus_n_uart_trigger_burst_command" title="Command Syntax">:SBUS&lt;n&gt;:UART:TRIGger:BURSt
        &lt;value&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_trigger_burst.htm#_sbus_n_uart_trigger_burst_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:TRIGger:BURSt?</a></code></strong></td><td><strong class="userinput"><code>&lt;value&gt; ::= {OFF | 1 to 4096 in NR1
        format}</code></strong></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_uart_trigger_data.htm#_sbus_n_uart_trigger_data_command" title="Command Syntax">:SBUS&lt;n&gt;:UART:TRIGger:DATA
        &lt;value&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_trigger_data.htm#_sbus_n_uart_trigger_data_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:TRIGger:DATA?</a></code></strong></td><td><p><strong class="userinput"><code>&lt;value&gt; ::= 8-bit integer from 0-255
        (0x00-0xff) in decimal, &lt;hexadecimal&gt;, &lt;binary&gt;, or
        &lt;quoted_string&gt;
        format</code></strong></p><p><strong class="userinput"><code>&lt;hexadecimal&gt; ::= #Hnn
        where n ::= {0,..,9 | A,..,F} for
        hexadecimal</code></strong></p><p><strong class="userinput"><code>&lt;binary&gt; ::=
        #Bnn...n where n ::= {0 | 1} for
        binary</code></strong></p><p><strong class="userinput"><code>&lt;quoted_string&gt; ::=
        any of the 128 valid 7-bit ASCII characters (or standard
        abbreviations)</code></strong></p></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_uart_trigger_idle.htm#_sbus_n_uart_trigger_idle_command" title="Command Syntax">:SBUS&lt;n&gt;:UART:TRIGger:IDLE
        &lt;time_value&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_trigger_idle.htm#_sbus_n_uart_trigger_idle_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:TRIGger:IDLE?</a></code></strong></td><td><strong class="userinput"><code>&lt;time_value&gt; ::= time from 1&nbsp;us to
        10&nbsp;s in NR3 format</code></strong></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_uart_trigger_qualifier.htm#_sbus_n_uart_trigger_qualifier_command" title="Command Syntax">:SBUS&lt;n&gt;:UART:TRIGger:QUALifier
        &lt;value&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_trigger_qualifier.htm#_sbus_n_uart_trigger_qualifier_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:TRIGger:QUALifier?</a></code></strong></td><td><strong class="userinput"><code>&lt;value&gt; ::= {EQUal | NOTequal | GREaterthan |
        LESSthan}</code></strong></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_uart_trigger_type.htm#_sbus_n_uart_trigger_type_command" title="Command Syntax">:SBUS&lt;n&gt;:UART:TRIGger:TYPE
        &lt;value&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_trigger_type.htm#_sbus_n_uart_trigger_type_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:TRIGger:TYPE?</a></code></strong></td><td><strong class="userinput"><code>&lt;value&gt; ::= {RSTArt | RSTOp | RDATa | RD1 |
        RD0 | RDX | PARityerror | TSTArt | TSTOp | TDATa | TD1 | TD0 |
        TDX}</code></strong></td></tr><tr><td><strong class="userinput"><code><a href="_sbus_n_uart_width.htm#_sbus_n_uart_width_command" title="Command Syntax">:SBUS&lt;n&gt;:UART:WIDTh
        &lt;width&gt;</a></code></strong></td><td><strong class="userinput"><code><a href="_sbus_n_uart_width.htm#_sbus_n_uart_width_query" title="Query Syntax">:SBUS&lt;n&gt;:UART:WIDTh?</a></code></strong></td><td><strong class="userinput"><code>&lt;width&gt; ::= {5 | 6 | 7 | 8 |
        9}</code></strong></td></tr></tbody></table></div></div><br class="table-break"></div></body></html>